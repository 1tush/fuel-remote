#!/usr/bin/env python

import argparse
import os
import yaml
import sys
import inspect
from fuel_remote.runner import Runner


CONFIG_FILE_NAME = "rem.yml"


def parse_args(config):
    parser = argparse.ArgumentParser(
        description='Helper to run fuel-qa tests remotely')
    parser.add_argument('--host', help='Remote host', dest="remote_host",
                        default=config.get('remote_host'))
    parser.add_argument('--path', help='Remote path', dest="remote_path",
                        default=config.get('remote_path'))
    parser.add_argument('--venv', help='Remote virtualenv path',
                        dest="venv_path", default=config.get('venv_path'))
    parser.add_argument('--iso-path', help='ISO path', dest="iso_path",
                        default=config.get('iso_path'))
    parser.add_argument('--ipython', '-i', action="store_false",
                        help='Use ipython to run tests', default=True)
    parser.add_argument('--screen', '-s', action="store_true",
                        help='Run commands inside screen', default=False)

    subparsers = parser.add_subparsers(title='Actions', dest='action')

    subparsers.add_parser('init',
                          help='Make local config template')

    subparsers.add_parser('sync',
                          help='Sync local catalog with remote')

    parser_execute = subparsers.add_parser(
        'execute',
        help='Execute command on remote server')
    parser_execute.add_argument('command', nargs=argparse.REMAINDER,
                                help="Command to execute")

    parser_test = subparsers.add_parser(
        'test',
        help='Run test group on remote server')
    parser_test.add_argument('groups', nargs=argparse.REMAINDER,
                             help="Test groups to execute")

    subparsers.add_parser('shell', help='Run bash on remote server')

    merged_config = vars(parser.parse_args())
    merged_config['envs'] = config.get('envs', {})
    return merged_config


def get_config():
    if not os.path.exists(CONFIG_FILE_NAME):
        print("Config file doesn't exists. You may generate it by calling\n"
              "$ rem init")
        config = {}
    else:
        with open(CONFIG_FILE_NAME) as f:
            config = yaml.load(f)
    for key in config:
        if key in os.environ:
            config[key] = os.environ[key]
    return parse_args(config)


def init_config():
    config = """
# your mirantis lab server
remote_host: mirantis-lab

# remote path for code (/home/<user>/fuel-qa in this example)
remote_path: fuel-qa

# name on iso in /home/<user>/iso/ folder
iso_name: iso/MirantisOpenStack-7.0.iso

# path of virtualenv (/home/<user>/fuel-devops-venv in this example)
venv_path: fuel-devops-venv
envs:
    # count of nodes
    NODES_COUNT: 7

    # name of your fuel env
    ENV_NAME: tk_devops
    OPENSTACK_RELEASE: ubuntu
    ADMIN_NODE_MEMORY: 4096

    # if slaves doesn't boot ubuntu after install it (kernel panic)
    DRIVER_USE_HOST_CPU: 'false'

    # use KVM on slaves.
    # IMPORTANT :
    # - incompatible with previous setting
    # - nested padding should be turned ON
    USE_KVM: 'false'
    """

    if os.path.exists(CONFIG_FILE_NAME) and os.path.isfile(CONFIG_FILE_NAME):
        answer = raw_input('Config file "%s" exists. '
                           'Overwrite it? (y/N)\n' % CONFIG_FILE_NAME)
        if answer.lower().strip() != 'y':
            print('Aborted!')
            sys.exit()
    with open(CONFIG_FILE_NAME, 'wb') as f:
        f.write(config)
        print('Done!')


def main():
    config = get_config()
    action_name = config.pop('action')
    if action_name == 'init':
        init_config()
        return
    runner = Runner(**config)
    action = getattr(runner, action_name)
    kwargs = {}
    for key in inspect.getargspec(action)[0][1:]:
        if key in config:
            kwargs[key] = config[key]
    action(**kwargs)


if __name__ == '__main__':
    main()
